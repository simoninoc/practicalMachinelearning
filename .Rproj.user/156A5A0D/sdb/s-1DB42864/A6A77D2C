{
    "contents" : "---\ntitle: \"Week 2 Note\"\nauthor: \"Zhuoru Lin\"\ndate: \"Wednesday, April 15, 2015\"\noutput: html_document\n---\n#The Caret Package\n\n##Data splitting (Spam data example)\n```{r, results='hide',message=FALSE}\nlibrary(caret);\nlibrary(kernlab);\ndata(spam);\ninTrain = createDataPartition(y = spam$type, p = 0.75, list = FALSE, times = 1)\n```\n\ncreateDataPartition returns a vector of number indicating the positions of splitted sample.\n\n\n###createDataPartition(y, times = 1,p = 0.5,list = TRUE,groups = min(5, length(y)))\n\ny        \na vector of outcomes. For createTimeSlices, these should be in chronological order.\n\ntimes\t\nthe number of partitions to create\n\np\t\nthe percentage of data that goes to training\n\nlist\t\nlogical - should the results be in a list (TRUE) or a matrix with the number of rows equal to floor(p * length(y)) and times columns.\n\ngroups\t\nfor numeric y, the number of breaks in the quantiles \n\n##Fit a model\n```{r}\ntraining = spam[inTrain,]#Define a trainning data set\nmodel = train(type~., data = training, method = \"glm\")\n```\n\n\n#Plotting Variables\n##Data: Predicting wage\n```{r}\nlibrary(ggplot2)\nlibrary(caret)\nlibrary(ISLR)\ndata(Wage)\nsummary(Wage)\n```\n\n##Training set\n```{r}\ninTrain = createDataPartition(Wage$wage, p = 0.7, list = F)\ntraining = Wage[inTrain,]\ntesting = Wage[-inTrain,]\n```\n\n\n##Feature Plot\nTo get a feeling of corelations\n```{r}\nfeaturePlot(x = training[,c(\"age\", \"education\",\"jobclass\")], y = training$wage, plot = \"pairs\")\n```\n\n##Cut2 making factors from Hmisc\n```{r}\nlibrary(Hmisc)\ncutWage = cut2(training$wage, g = 3)#g specify number of intervals to be cutted to\nclass(cutWage) # cut2 returns only factor\nhead(cutWage)\np1 = qplot(cutWage, age , data = training, fill = cutWage, geom = c(\"boxplot\"))\n```\n\n\n##Making Tables\n\n```{r}\nt1 = table(cutWage, training$jobclass) #table function can take one or more factors\nprop.table(x = t1, margin = 1) #Margin 1 refers to proportion of each rows, 2 refers to proportion of each columns\n```\n\n##Density plot in ggplot2\n```{r}\nqplot(wage, color = education, data = training, geom = \"density\")\n```\n\n\n#Preprocessing\n##Standardizing\nusing the preProcess function in caret package.\n\nExample Data\n```{r}\nlibrary(kernlab)\ndata(spam)\ninTrain = createDataPartition(y = spam$type, p = 0.75, list = F)\ntraining = spam[inTrain,]\ntesting = spam[-inTrain,]\n```\n\npreProcess(data, method = c(\"center\",\"scale\")) will return a trainsformation (a \"preProcess\" object) of standardizing. This transformation can be apply to all data with same variables using predict().\n\n```{r}\nstandardize = preProcess(training[,-58], method = c(\"center\", \"scale\"))\ncapave = predict(standardize,training[,-58])$capitalAve\n```\n\n\n##standardizing argument in train()\n```{r}\nmodel = train(type~.,data = training, preProcess = c(\"center\",\"scale\"), method = \"glm\")\nmodel\n```\n\n##Box-Cox transformation\nusing preProcess(data, method = c(\"boxcox\"))\nBox-cox transformation is a continuous transformation that makes data looks more \"normal\". But it does not takes care of repeated values.\n\n##Impute Data\nPrediction algorithm always does not work if there are some NAs in the data set.\nWe can assign values to these position using k-nearest-neighbour algorithm. \nTo do this just specify methoed = \"knnImpute\".\n\n###Example\n```{r}\nknn = preProcess(training[,-58],method = \"knnImpute\")\n```\n\n\n#Principal Components Analysis (PCA)\nPCA finds the linear combination of predictors that explains most variations of the data. Without knowing how to prove mathematically we simply learn how to do it with caret.\n\n##PreProcess using pca method\n```{r}\npcaSpam = preProcess(x = spam[,-58], method = \"pca\",pcaComp = 2)\nspamPC = predict(pcaSpam, spam[,-58])\nqplot(spamPC[,1],spamPC[,2],color = type, data = spam)\n```\n\nWe can see a clear seperation on data.\n\n##Prediction using regression\n```{r}\n\n```\n\n\n\n\n",
    "created" : 1429125183874.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3097069904",
    "id" : "A6A77D2C",
    "lastKnownWriteTime" : 1434330491,
    "path" : "~/RFiles/Practical Machine Learning/Week2_Note.Rmd",
    "project_path" : "Week2_Note.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}